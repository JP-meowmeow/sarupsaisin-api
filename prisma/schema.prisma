// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int                  @id @default(autoincrement())
  email                String               @unique
  password             String?
  resetPasswordToken   String?              @unique
  resetPasswordExpires DateTime?
  role                 roles                @default(USER)
  enabled              Boolean              @default(true)
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  dateOfBirth          String?
  createdArticle       Article[]
  createdCourse        Course[]
  enrollments          Enrollment[]
  favorites            Favorite[]
  purchasedLevels      UserPurchasedLevel[]
  Book                 Book[]

  @@map("user")
}

model Enrollment {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  course     Course   @relation(fields: [courseId], references: [id])
  courseId   Int
  slipLink   String
  status     status   @default(PENDING)
  enrolledAt DateTime @default(now()) // When the user purchased the course

  @@map("enrollment")
}

model Favorite {
  id        Int      @id @default(autoincrement())
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  article   Article? @relation(fields: [articleId], references: [id])
  articleId Int?

  @@map("favorite")
}

enum status {
  PENDING
  DONE
}

enum roles {
  ADMIN
  USER
}

model Article {
  id                   Int        @id @default(autoincrement())
  articleName          String     @unique
  articleDetails       String     @db.LongText
  createdDate          DateTime   @default(now()) @db.Timestamp(0)
  updatedDate          DateTime   @updatedAt @db.Timestamp(0)
  articleThumbnailLink String
  category             categories
  User                 User?      @relation(fields: [userId], references: [id])
  userId               Int?
  favorites            Favorite[]

  @@map("article")
}

enum categories {
  JLPTN5
  JLPTN4
  JLPTN3
  OTHER
}

// JLPT Test

enum Level {
  JLPTN5
  JLPTN4
  JLPTN3
  JLPTN2
  JLPTN1
}

model UserPurchasedLevel {
  id           Int      @id @default(autoincrement())
  userId       Int
  jlptLevel    Level
  purchaseDate DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])

  @@map("userPurchaedLevel")
}

model JlptLevel {
  id         Int   @id @default(autoincrement())
  level      Level @unique // เช่น 'N5', 'N4'
  freeTestId Int? // อ้างอิงชุดข้อสอบฟรี (optional)

  tests JlptTest[]

  @@map("jpltLevel")
}

model JlptTest {
  id          Int    @id @default(autoincrement())
  jlptLevelId Int
  name        String // ชื่อชุดข้อสอบ เช่น "N5 模擬試験 第1回"
  price       Int // 0 = ฟรี, >0 = เสียเงิน

  questions Question[]

  // jlptLevel JlptLevel  @relation(fields: [jlptLevelId], references: [id])
  jlptLevel JlptLevel @relation(fields: [jlptLevelId], references: [id], onDelete: Cascade)

  @@map("jpltTest")
}

model Question {
  id         Int    @id @default(autoincrement())
  content    String // เนื้อหาคำถาม
  jlptTestId Int
  type       String // ประเภท เช่น "vocab", "grammar", "reading"

  // jlptTest    JlptTest     @relation(fields: [jlptTestId], references: [id])
  jlptTest    JlptTest     @relation(fields: [jlptTestId], references: [id], onDelete: Cascade)
  choices     Choice[]
  Explanation Explanation?

  @@map("question")
}

model Choice {
  id         Int     @id @default(autoincrement())
  text       String
  isCorrect  Boolean // true เฉพาะคำตอบที่ถูกต้อง
  questionId Int

  // question Question @relation(fields: [questionId], references: [id])
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("choice")
}

model Explanation {
  id         Int    @id @default(autoincrement())
  text       String // คำอธิบายเกี่ยวกับเฉลย
  questionId Int    @unique

  // question Question @relation(fields: [questionId], references: [id])
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("explanation")
}

// course

model Course {
  id                  Int          @id @default(autoincrement())
  courseName          String
  shortDescription    String
  longDescription     String       @db.LongText
  courseThumbnailLink String
  price               Decimal      @db.Decimal(10, 2)
  sold                Int?         @default(0)
  isFree              isCourseFree
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  category            categories   @default(JLPTN4)
  user                User?        @relation(fields: [userId], references: [id])
  userId              Int?
  unit                Unit[]
  Enrollment          Enrollment[]

  @@map("course")
}

enum isCourseFree {
  FREE
  NOTFREE
}

model Unit {
  id          Int     @id @default(autoincrement())
  unitNumber  Int
  title       String
  description String?
  youtubeLink String

  Course   Course? @relation(fields: [courseId], references: [id])
  courseId Int?

  @@map("unit")
}

model Book {
  id                Int      @id @default(autoincrement())
  bookTitle         String
  shortDescription  String
  longDescription   String
  price             Float
  bookThumbnailLink String
  userId            Int
  user              User     @relation(fields: [userId], references: [id])
  createdAt         DateTime @default(now())
  samplePages       Json     @default("[]") // ← เปลี่ยนจาก String[] เป็น Json

  @@map("book")
}
